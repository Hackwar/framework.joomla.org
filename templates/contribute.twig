{% extends "index.twig" %}

{% block title %}Start contributing to the Joomla! Framework{% endblock %}

{% block metaDescription %}Learn how to contribute to the Joomla! Framework{% endblock %}

{% block content %}
<section class="contribute container">
    <h1 class="text-center">Contributing to the Joomla! Framework</h1>

    <h2 class="page-header">Repository Structure</h2>
    <p>As of June 2017, the individual repositories in the <a href="https://github.com/joomla-framework">Joomla! Framework GitHub organization</a> are generally structured the same.</p>

    <h3>Branches</h3>
    <p>Most repositories have two branches representing the two major Framework versions; 1.x and 2.0. Except for the noted exceptions below, the <code>master</code> branch represents the stable 1.x branch and the <code>2.0-dev</code> branch represents the upcoming 2.0 release.</p>
    <ul>
        <li>The Crypt package uses the <code>master</code> for 2.0 and a <code>1.x-dev</code> branch for 1.x</li>
        <li>The Log package has no 2.0 branch since this package was deprecated before work on the Framework 2.0 release began</li>
        <li>The Console, Preload, and Renderer packages are not part of Framework 1.x, therefore their <code>master</code> branches represent the 2.0 release</li>
    </ul>

    <h3>Deprecated Packages</h3>
    <p>Several packages have been deprecated and will not be supported in the Framework 2.0 release. Unless noted, work had been in progress to update all packages for the Framework 2.0 release, including internal refactoring, however as these packages are now deprecated their <code>2.0-dev</code> branches should be considered <strong><em>abandoned</em></strong>.</p>
    <ul>
        <li>Cache - Use any <a href="https://www.php-fig.org/psr/psr-6/">PSR-6</a> or <a href="https://www.php-fig.org/psr/psr-16/">PSR-16</a> compliant package instead</li>
        <li>Compat</li>
        <li>Date - Use the <a href="https://carbon.nesbot.com/">Carbon</a> library instead</li>
        <li>Facebook</li>
        <li>Google</li>
        <li>Image</li>
        <li>LDAP - Use the <a href="https://symfony.com/doc/current/components/ldap.html">Symfony LDAP Component</a> instead</li>
        <li>LinkedIn</li>
        <li>Log - Use any <a href="https://www.php-fig.org/psr/psr-3/">PSR-3</a> compliant package instead</li>
        <li>OpenStreetMap</li>
        <li>Twitter</li>
    </ul>

    <h3>Abandoned Packages</h3>
    <p>Below are packages which are deprecated and no longer supported by the Framework Working Group and Joomla! project. Their repositories are in a read-only state and all maintenance is discontinued.</p>
    <ul>
        <li>DateTime - Use the <a href="https://carbon.nesbot.com/">Carbon</a> library instead</li>
        <li>Form</li>
    </ul>

    <h3>File Structure</h3>
    <p>Joomla! Framework packages are <a href="https://www.php-fig.org/psr/psr-4/">PSR-4</a> compliant and follow a common filesystem structure.</p>
    <ul>
        <li><code>.github</code> - GitHub repository metadata (contributing guidelines, issue and pull request templates)</li>
        <li><code>.travis</code> - Configuration files for the Travis-CI platform</li>
        <li><code>docs</code> - As part of the Framework 2.0 release, documentation is being added to each package; this directory is not present in the 1.x branches</li>
        <li><code>src</code> - The production code for the package</li>
        <li><code>tests</code> - The test suite for the package</li>
    </ul>
    <p><span class="badge badge-info">NOTE</span> The Crypt 1.x branch is still structured for <a href="http://www.php-fig.org/psr/psr-0/">PSR-0</a> support due to backward compatibility implications with migrating to PSR-4 and as such the branch has a slightly different repository structure. Additionally, the Session package's 1.x branch was not migrated to PSR-4 and still follows the PSR-0 structure.</p>

    <h2 class="page-header">Issues/Pull Requests</h2>
    <p>Issue tracking and pull requests are managed via <a href="https://github.com">GitHub</a> in each package's repository. All of the Framework's packages are listed under the Joomla! Framework organization. You can find the documentation about how to fork a repository and start contributing to the Joomla! Framework at <a href="https://help.github.com/articles/fork-a-repo/">https://help.github.com/articles/fork-a-repo</a>.</p>
    <p>All contributions are welcome to be submitted for review for inclusion in the Framework, but before they will be accepted, we ask that you follow these simple guidelines:</p>
    <ul>
        <li><a href="#versioning">Versioning</a></li>
        <li><a href="#coding-standards">Coding Standards</a></li>
        <li><a href="#unit-testing">Unit Testing</a></li>
        <li><a href="#documentation">Documentation</a></li>
    </ul>
    <p>Please be patient as not all items will be tested or reviewed immediately by the <a href="https://volunteers.joomla.org/teams/framework-working-group">Framework team</a>. Also be receptive to feedback about your changes to the Framework. The maintainer team and other community members may make suggestions or ask questions about your change. This is part of the review process, and helps everyone to understand what is happening, why it is happening, and potentially optimize your code.</p>

    <div class="alert alert-warning">
        <h4 class="alert-heading">Security Issues</h4>
        <p>Security issues should be reported to the <a class="alert-link" href="https://developer.joomla.org/security.html">Joomla! Security Strike Team</a> by either filling out <a class="alert-link" href="https://developer.joomla.org/security/contact-the-team.html">the contact form</a> or emailing <a class="alert-link" href="mailto:security@joomla.org">security@joomla.org</a>.</p>
    </div>

    <h2 id="versioning" class="page-header">Versioning</h2>
    <p>When you add new classes, properties or methods, please use <code>__DEPLOY_VERSION__</code> in the <code>@since</code> tags in Docblocks. We'll replace that marker with the actual version the changes are deployed in.</p>

    <h2 id="coding-standards" class="page-header">Coding Standards</h2>
    <p>All submitted code must be compliant with the Joomla! Coding Standards. This standard is documented at <a href="https://developer.joomla.org/coding-standards.html">https://developer.joomla.org/coding-standards.html</a>. There is a tool called <a href="https://github.com/squizlabs/PHP_CodeSniffer">PHP_CodeSniffer</a> that allows you to validate your code against the Joomla! Coding Standards.</p>

    <h3>Install & Use</h3>
    <p>The Framework repositories are using version 2.x of the Joomla! Coding Standards which is based on the 2.x branch of PHP_CodeSniffer. PHP_CodeSniffer is installed as part of a <code>composer install</code>, helpful when you are cloning a package's git repository. Please see <a href="https://github.com/squizlabs/PHP_CodeSniffer">https://github.com/squizlabs/PHP_CodeSniffer</a> for more documentation on PHP_CodeSniffer.</p>
    <p>Once PHP_CodeSniffer is installed and the Joomla! Coding Standards are downloaded, you can now check your code against the standard. The exact command to be run will vary based on whether the repository uses the base definition or has a custom ruleset due to rule exemptions for that package, therefore we suggest copying the command from the package's <code>.travis.yml</code> file.</p>

    <h3>IDE Support</h3>
    <p>Some editors support PHP_CodeSniffer as a plugin or a built in feature. It will allow you to see if your code matches the Joomla! standard directly in your editor. You can find configuration files for many editors from this repository: <a href="https://github.com/joomla/coding-standards/tree/master/Joomla/IDE">https://github.com/joomla/coding-standards/tree/master/Joomla/IDE</a>. Download the repository content via the Zip button and import the appropriate <code>.xml</code> file into your editor.</p>

    <h2 id="unit-testing" class="page-header">Unit Testing</h2>
    <p>Whether your pull request is a bug fix or introduces new classes or methods to the Framework, we ask that you include unit tests for your changes. We understand that not all users submitting pull requests will be proficient with PHPUnit. The maintainers and community as a whole are a helpful group and can help you with writing tests. PHPUnit, and any additional testing dependencies, is installed as part of a <code>composer install</code>, helpful when you are cloning a package's git repository. Please see <a href="https://phpunit.de/manual/current/en/index.html">https://phpunit.de/manual/current/en/index.html</a> for the full PHPUnit documentation.</p>

    <h2 id="documentation" class="page-header">Documentation</h2>
    <p>For Framework 1.x releases, documentation for each package can be found in the <code>README.md</code> file in the root of the repository. As of 2.0, each repository will have a dedicated <code>docs</code> directory.</p>
    <p>The <code>docs</code> directory structure at a minimum uses the following format:</p>
    <ul>
        <li><code>classes</code> - This directory contains documentation about the package's classes, interfaces, and traits, including summaries of the object's purpose and example uses</li>
        <li><code>index.md</code> - This is a file which will be used as a navigational menu when the package documentation is integrated into this site</li>
        <li><code>overview.md</code> - This is an overview of the package and its use</li>
        <li><code>v1-to-v2-update.md</code> - This file will highlight backward compatibility breaking changes in each package while migrating from 1.x to 2.0</li>
    </ul>
    <p>The documentation files use  <a href="https://help.github.com/categories/writing-on-github/">GitHub Flavored Markdown</a>. When contributing new features to existing packages, please add notes about the new features to the existing <code>README.md</code> file in the packages you change or add new files to the <code>docs</code> directory (depending on the branch you are submitting the change to). When submitting new packages, documentation in the form of a <code>README.md</code> file will be required with your pull request. The package documentation should explain how a developer should should be able to get started using the code in the package. The documentation should give an explanation of the classes, interfaces, and/or traits, and provide several simple examples.</p>
</section>
{% endblock %}
